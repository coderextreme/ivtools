#! /usr/bin/env comterp_run
#
# csvplot  process .csv file
#

/* command line help */
if(arg(1)=="help" || arg(1)=="-h" || arg(1)==nil || arg(1)=="?" ||
  arg(1)=="-help" || arg(1)=="--help" || arg(1)=="-?" :then
  
    print("csvplot  plot .csv file in comdraw\n");
    print("Usage:  csvplot csvfile [keylist] --port num -geometry str\n\n");
    print("--host str\tcomdraw host name (default is \"localhost\")\n");
    print("--port num\tcomdraw port number (default is 20002)\n");
    print("--geometry str  X11 window geometry argument\n");
    exit)

fp=open(arg(1) "r")
if(fp==null :then
  print("csvplot:  unable to open csv file %s\n" arg(1) :err);
  exit)

dummy_flag=false
host_flag=false
host_name="localhost"
port_flag=false
port_num=20002
geom_flag=false
geom_str="1000x1000"
for(i=2 i<narg() i++
  switch(substr(arg(i) 2 :after)
    :dummy  dummy_flag=true
    :host  host_flag=true;if(substr(arg(i+1) 2)=="--" :then continue);i++;host_name=arg(i)
    :port  port_flag=true;if(substr(arg(i+1) 2)=="--" :then continue);i++;port_num=arg(i)
    :geometry  geom_flag=true;if(substr(arg(i+1) 2)=="--" :then continue);i++;geom_str=arg(i)
    :default print("csvplot:  Unknown argument %s\n" arg(i) :err)))

// grab title
s=gets(fp)
hdrtoks=split(s :tokstr ',')

// check if comdraw already running
sock=socket(host_name port_num)
chkmap=sock==nil
if(sock==nil&&host_name=="localhost" :then
  shell(print("comdraw -stripped -geometry %s -comdraw %d &" geom_str port_num :str));
  n=10;
  while(n-- && sock==nil
     usleep(100000);
     sock=socket(host_name port_num)))
if(sock==nil :then
  print("Unable to establish connection to comdraw at %s:%d\n" host_name port_num);
  exit(1))

// parse out window size
xwin=int(substr(geom_str "x"))
ywin=int(substr(geom_str "x" :after))

// get screen size
while((scrdim=remote(sock cond(chkmap "ssize(:chkmap)" "ssize()")))==nil
  usleep(100000))
xscr=at(scrdim)
yscr=at(scrdim 1)

// set margin to 10%
margin = .1
xbeg=int(xscr*margin)
ybeg=int(yscr*margin)
xend=int(xscr*(1-margin))
yend=int(yscr*(1-margin))
remote(sock print("rect(%d,%d,%d,%d)" xbeg ybeg xend yend :str))
                                                             
close(sock)
